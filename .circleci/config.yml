version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
        workflow-id:
            type: string
            description: Workflow ID
    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            #aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow-id >>
            #aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow-id >>

            
jobs:
  lint-python:
    docker:
      - image: ubuntu:latest

    #working_directory: ~/workdir

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y python3
            apt install -y python3-pip
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
        
      - run:
          name: Run lint
          command: |
            . venv/bin/activate
            pylint --disable=R,C,W1203,W1202 app.py

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  lint-docker:
    docker:
      - image: ubuntu:latest

    #working_directory: ~/workdir

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y python3
            apt install -y python3-pip
            . venv/bin/activate
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint

      - run:
          name: Run lint
          command: |
            . venv/bin/activate
            hadolint Dockerfile

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}



  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Test Frontend
          command: |
              cd frontend
              npm install
              npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Test Backend
          command: |
              cd backend
              npm install
              npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Scan Frontend
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Scan Backend
          command: |
              cd backend
              npm install
              #npm audit fix --audit-level=critical --force
              #npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*Failed with errors*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and qzip
          command: |
            yum -y install tar gzip
      # - run:
      #     name: Ensure back-end infrastructure exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/backend.yml \
      #         --tags project=udapeople \
      #         --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            #export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[].Instances[].PublicDnsName[]" | grep ec2 | sed 's/\"//g' | sed 's/ //g')
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-*" --query "Reservations[].Instances[].PublicDnsName[]" | grep ec2 | sed 's/\"//g' | sed 's/ //g')
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
#     # Here's where you will add some code to rollback on failure      
#     - destroy-environment:
#         workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}


  configure-infrastructure:
    docker:
      - image: ansible/ansible:default
    environment:
      - TYPEORM_CONNECTION: "{{ lookup('env', 'TYPEORM_CONNECTION')}}"
      - TYPEORM_ENTITIES: "{{ lookup('env', 'TYPEORM_ENTITIES')}}"
      - TYPEORM_HOST: "{{ lookup('env', 'TYPEORM_HOST')}}"
      - TYPEORM_PORT: 5432
      - TYPEORM_USERNAME: "{{ lookup('env', 'TYPEORM_USERNAME')}}"
      - TYPEORM_PASSWORD: "{{ lookup('env', 'TYPEORM_PASSWORD')}}"
      - TYPEORM_DATABASE: "{{ lookup('env', 'TYPEORM_DATABASE')}}"
      - TYPEORM_MIGRATIONS: "{{ lookup('env', 'TYPEORM_MIGRATIONS')}}"
      - TYPEORM_MIGRATIONS_DIR: "{{ lookup('env', 'TYPEORM_MIGRATIONS_DIR')}}"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 3c:ee:06:16:84:cf:68:6e:12:17:e4:34:eb:63:f4:85
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y tar gzip ansible awscli
      
      - run:
          name: Configure server (Command runs OK in shell, but here say "cannot verify the authenticity of the host..do you want to continue?(yes/no)")
          command: |
              cd .circleci/ansible
              #ansible-playbook --private-key udacity.pem -e env=${CIRCLE_BRANCH} -i inventory.txt configure-server.yml
#     # Here's where you will add some code to rollback on failure      
#     - destroy-environment:
#         workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}




  run-migrations:
    docker:
      - image: alpine
    steps:
      - checkout
      - run:
          name: Prerequisites
          command: |
            apk update
            apk add npm    
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                #curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/MF4Z6WcS9GKpPStzupaQix/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
            
      # Here's where you will add some code to rollback on failure      
      #- revert-migrations:
          #workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add npm
            apk add --no-cache python3 py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Get backend url
          command: |
            #export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[].Instances[].PublicDnsName")
            export BACKEND_IP=ec2-18-212-89-41.compute-1.amazonaws.com
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws --version
            #aws s3 cp dist s3://udapeople-f11a082 --recursive
            #aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # Here's where you will add some code to rollback on failure      
                  
  deploy-backend:
    docker:
      - image: alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "3c:ee:06:16:84:cf:68:6e:12:17:e4:34:eb:63:f4:85"
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add npm
            apk add --no-cache python3 py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install awscli \
            && rm -rf /var/cache/apk/*
            apk add ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            #ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      #- revert-migrations:
          #workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
  smoke-test:
    docker:
      - image: alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add curl
            apk add npm
            apk add --no-cache python3 py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Get backend url
          command: |
            #export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[].Instances[].PublicDnsName")
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=ec2-18-212-89-41.compute-1.amazonaws.com
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-f11a082.s3-website-us-east-1.amazonaws.com/#/employees"            
            #URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
            # Change this to 0 after the job fails
                return 0
            else
                return 1
            fi
      #Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow-id: 8717e8f
          #workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
            
          

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              echo "Nothing to do here"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --tags project=udapeople \
            --parameter-overrides WorkflowID="udapeople-f11a082"
            #--parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      
      
      # Here's where you will add some code to rollback on failure  
      #- revert-migrations:
          #workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"   
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Removing s3 bucket, frontend and backend stack"
              # aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              # aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              # aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
        - lint-python
        - lint-docker
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      #  - deploy-infrastructure
      
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     #filters:
      #       #branches:
      #         #only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      #- run-migrations
      #- run-migrations:
      #    requires: [configure-infrastructure]
      #- deploy-frontend
      #- deploy-frontend:
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #- deploy-backend
      #- deploy-backend:
      #    requires: [run-migrations]
      #- smoke-test
      #- smoke-test:
      #    requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup
      #- cleanup:
      #    requires: [cloudfront-update]
