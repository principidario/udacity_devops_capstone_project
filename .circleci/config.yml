version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
        workflow-id:
            type: string
            description: Workflow ID
    
    steps:
      - run:
          name: destroy environments
          when: on_fail
          command: |
            #aws cloudformation delete-stack --stack-name udacity-devops-capstone-backend-<< parameters.workflow-id >>
            #aws cloudformation delete-stack --stack-name udacity-devops-capstone-loadbalancer

            
jobs:
  lint-python:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            
      - run:
          name: install dependencies
          command: |
            apt update
            apt install -y python3
            apt install -y python3-pip
            pip install --upgrade pip
            pip install -r requirements.txt
        
      - run:
          name: run lint
          command: |
            pylint --disable=R,C,W1203,W1202 app.py

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  lint-docker:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            
      - run:
          name: install dependencies
          command: |
            apt update
            apt install -y python3
            apt install -y python3-pip
            apt install -y wget
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint

      - run:
          name: run lint
          command: |
            hadolint Dockerfile

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  
  build-docker:
    machine: true
    steps:
      - checkout
      - run: 
          name: login to dockerhub
          command: |
            docker login --username ${DOCKER_USER} --password ${DOCKER_PASS}
        
      - run:
          name: build the application image
          command: | 
            #docker build -t $DOCKER_USER/udacity-devops-capstone:latest .
            docker build -t $DOCKERPATH .
      
      - run:
          name: push the image to dockerhub
          command: |
            #docker push $DOCKER_USER/udacity-devops-capstone:latest
            docker push $DOCKERPATH


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and qzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-devops-capstone \
              --stack-name "udacity-capstone-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            #export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-udacity-devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[].Instances[].PublicDnsName[]" | grep ec2 | sed 's/\"//g' | sed 's/ //g')
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-udacity-devops-capstone-*" --query "Reservations[].Instances[].PublicDnsName[]" | grep ec2 | sed 's/\"//g' | sed 's/ //g')
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
#     - destroy-environment:
#         workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}


                  
  deploy-backend:
    docker:
      - image: alpine
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --no-cache python3 py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install awscli \
            && rm -rf /var/cache/apk/*
            apk add ansible
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook --private-key udacity.pem -e DOCKERPATH=$DOCKERPATH -i inventory.txt deploy-backend.yml
#     - destroy-environment:
#         workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}



  smoke-test:
    docker:
      - image: alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add curl
            apk add --no-cache python3 py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install awscli \
            && rm -rf /var/cache/apk/*
      - run:
          name: Backend smoke test.
          command: |
            #export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-udacity-devops-capstone-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[].Instances[].PublicDnsName" | sed 's/\[//' | sed 's/\]//' | sed 's/\"//g' | tr -d '\n' | sed 's/ //g' | sed 's/,//g')
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-udacity-devops-capstone-*" --query "Reservations[].Instances[].PublicDnsName" | sed 's/\[//' | sed 's/\]//' | sed 's/\"//g' | tr -d '\n' | sed 's/ //g' | sed 's/,//g')
            
            export API_URL="http://${BACKEND_IP}:8000"
            echo "${API_URL}"
            if curl -X POST "${API_URL}/run"
            then
                return 0
            else
                return 1
            fi
      # - destroy-environment:
      #     workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
            
          

  loadbalancer-update:
    docker:
      - image: alpine
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --no-cache python3 py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install awscli \
            && rm -rf /var/cache/apk/*
          
      - run:
          name: Update loadbalancer distribution
          command: |
            export EC2Instance=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-udacity-devops-capstone-*" --query "Reservations[].Instances[].InstanceId" | sed 's/\[//' | sed 's/\]//' | sed 's/\"//g' | tr -d '\n' | sed 's/ //g' | sed 's/,//g')
            export EC2Instance=i-008897b98285feaf3
            echo "${EC2Instance}"
            aws cloudformation deploy \
            --template-file .circleci/files/loadbalancer.yml \
            --stack-name udacity-devops-capstone-loadbalancer \
            --parameter-override EC2Instance=${EC2Instance}

      
      # - destroy-environment:
      #     workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"   
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Removing old stacks"
              # aws cloudformation delete-stack --stack-name "udacity-capstone-backend-${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - lint-python
      - lint-docker
      - build-docker:
          requires: [lint-docker]
      - deploy-infrastructure:
          requires: [lint-python, build-docker]
      - deploy-backend:
         requires: [deploy-infrastructure]
      - smoke-test:
         requires: [deploy-backend]
      - loadbalancer-update:
         requires: [smoke-test]
      - cleanup:
         requires: [loadbalancer-update]
